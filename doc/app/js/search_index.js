var search_data = {"index":{"searchIndex":["actionview","base","helpers","dynamicform","formbuildermethods","instancetagmethods","formbuilder","instancetag","activerecord","admincontroller","adminhelper","adminmailer","answer","answerlikecontroller","answermailer","answerselection","answerscontroller","applicationcontroller","applicationhelper","authlogic","session","authlogicopenid","actsasauthentic","config","methods","session","config","methods","version","comment","commentcontroller","commenthelper","commenterror","commentmailer","commentsshared","doclist","entity","docresult","searchrequest","docresult","entity","drupalcontentfieldimagegallery","drupalcontentfieldmapeditor","drupalcontentfieldmapper","drupalcontenttypemap","drupalfile","drupalmainimage","drupalprofilefield","drupalprofilevalue","drupalupload","drupaluser","editorcontroller","featurescontroller","featureshelper","homecontroller","homehelper","image","imagescontroller","legacycontroller","likecontroller","mapcontroller","maphelper","node","nodeselection","nodeshared","nodetag","notescontroller","noteshelper","object","openidauthentication","result","openidcontroller","openidhelper","passwordresetmailer","questionscontroller","redirecthelper","relationship","relationshipscontroller","revision","searchrequest","entity","searchservice","searchescontroller","searcheshelper","settingscontroller","solrtoggle","spamaway","srch","api","doclist","docresult","searchrequest","taglist","tagresult","search","typeahead","taglist","statscontroller","subscriptioncontroller","subscriptionmailer","tableless","tag","tagcontroller","taghelper","taglist","entity","tagresult","tagresult","entity","tagselection","talkcontroller","typeaheadservice","uniqueurlvalidator","uniqueusernamevalidator","user","authlogic","cryptoproviders","userselection","usersession","usersessionscontroller","usertag","usertagscontroller","usertagshelper","userscontroller","usershelper","welcomemailer","wikicontroller","wikihelper","<=>()","[]()","[]()","accept()","activities()","activities()","activities_grid()","activity()","add()","addall()","addall()","adddoc()","addtag()","add_barnstar()","add_comment()","add_pape()","add_sreg()","add_tag()","add_to_list()","add_to_lists()","answer_comment_notify()","answer_create()","answer_notify()","answered()","answered()","approved()","attributes_to_save()","authenticate_with_open_id()","author()","author()","author()","author()","author()","author()","author_topic()","authors()","auto_register()","auto_register=()","auto_register_value()","ban()","ban()","barnstar()","barnstar()","barnstars()","barnstars()","batch()","belongs_to()","bio()","blog()","body()","body()","body()","body_email()","body_extras()","body_preview()","body_preview()","body_raw()","body_rich()","can_tag()","captured_on()","cartographer_notes()","change_locale()","coauthored_notes()","coauthors()","column()","column_type()","columns()","comment_count()","comment_streak()","comment_weekly_tallies()","comments()","comments()","comments()","comments()","content_followed_in_past_period()","contributor_count()","contributors()","contributors_index()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_by_token()","create_comment()","create_drupal_user()","created_at()","created_at()","created_at()","created_at()","credentials=()","dashboard()","dashboard2()","decision()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","demote_basic()","description()","description()","destroy()","destroy()","destroy_drupal_user()","diff()","drupal_content_field_image_gallery()","drupal_main_image()","drupal_user()","drupal_user()","dynamic()","edit()","edit()","edit()","edit()","edit()","edit_path()","editor()","email()","embed()","error_message_on()","error_message_on()","error_messages()","error_messages_for()","exists?()","exists?()","feature()","fetch()","fetch_tags()","fid()","file()","file()","file()","filename()","files()","filetype()","filetype()","filter_by_type()","find_by_openid_identifier_method()","find_by_openid_identifier_method=()","find_by_path()","find_comments()","find_map()","find_maps()","find_pages()","find_nodes_by_type()","find_nodes_by_type_with_all_tags()","find_notes()","find_notes()","find_pages()","find_popular_notes()","find_research_notes()","find_tags()","find_top_nodes_by_type()","find_users()","find_wiki()","first_time_poster()","first_time_poster()","follow()","followed()","follower_count()","followers()","followers()","followers_of_mentioned_tags()","followers_who_dont_follow_tags()","following()","following()","following?()","form()","fromrequest()","fromsearch()","fromsearch()","front()","gallery()","generate_path()","generate_reset_key()","getdocs()","gettags()","get_matching_tags_without_aliasing()","get_pairs()","get_value_of_power_tag()","graph_grid()","gridsembed()","has_accepted_answers()","has_mailing_list?()","has_power_tag()","has_power_tag()","has_role()","has_tag()","has_tag()","has_tag_without_aliasing()","home()","human_response?()","icon()","icon()","id()","id()","id()","idp_xrds()","image()","image()","included()","included()","included()","included()","increment_count()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","info()","inheritance_column()","inheritance_column()","inheritance_column()","inline_hashtags()","inline_tags()","input()","insert_extras()","instance_method_already_implemented?()","is_authorized()","is_image?()","is_image?()","is_initial?()","is_liked_by()","is_powertag?()","last()","lat()","lat()","latest()","legacy()","license()","like()","like_count()","liked()","liked()","liked()","liked?()","liked_by()","liked_notes()","liked_pages()","liked_rss()","likers()","likers()","likes()","likes()","likes()","likes()","list()","locale_name_pairs()","location()","location_modal()","logged_in_as()","logout_remotely()","lon()","lon()","mailing_list()","main_image()","make_answer()","map()","map_openid_registration()","map_saved_attributes()","maps()","maps()","mark_spam()","mark_spam_revision()","max_zoom()","mentioned_users()","mentioned_users()","message()","methods()","migrate()","migrate()","min_zoom()","moderate()","moderate()","name()","name()","nearby()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_node()","new_note()","new_revision()","new_wiki()","next()","next_by_author()","next_thread()","node()","node()","node_count()","node_tags()","nodes()","nodes()","nodes_for_period()","normal_tags()","note_add()","note_count()","note_streak()","notes()","notes()","notes()","notes()","notes()","notes()","notes_for_tags()","notes_grid()","notes_map()","notes_map_by_tag()","notify()","notify()","notify()","notify_answer_accept()","notify_answer_author()","notify_answer_like()","notify_answer_likers_author()","notify_author_of_approval()","notify_barnstar()","notify_callout()","notify_callout_users()","notify_moderators_of_approval()","notify_moderators_of_spam()","notify_node_creation()","notify_node_moderators()","notify_note_author()","notify_note_liked()","notify_question_author()","notify_tag_added()","notify_tag_followers()","notify_tag_followers()","notify_users()","openid()","openid_identifier=()","openid_identifier=()","openid_optional_fields()","openid_optional_fields=()","openid_required_fields()","openid_required_fields=()","openid_username()","page_add()","parent()","parent()","parent_commenter_uids()","parent_liker_uids()","parent_reviser_uids()","path()","path()","path()","path()","path()","people()","people_grid()","people_map()","photo()","photo_path()","place()","places()","popular()","popular()","popular()","post()","power_tag()","power_tag_objects()","power_tags()","preprocess()","prev_by_author()","previous()","profile()","profile_image()","profile_values()","promote_admin()","promote_moderator()","publish()","publish()","publish()","publish_revision()","published_on()","questions()","questions()","questions()","questions_grid()","queue()","range()","raw()","raw()","register()","render_body()","render_body_email()","render_map()","render_response()","render_xrds()","replace()","replace()","report()","research_notes()","reset()","reset_notify()","reset_user_password()","responded_to()","response_count()","responses()","results()","resume()","revert()","revision()","revision_count()","revisions()","revisions()","rich()","role()","root()","rss()","rss()","rss()","rss()","rsvp()","run_count()","ruser()","save()","save()","save()","search()","search()","search()","search_all()","search_maps()","search_notes()","search_profiles()","search_questions()","search_tags()","search_wikis()","server()","setsrchparams=()","set_likes()","set_token()","setup()","shortlink()","shortlink()","shouldindexsolr()","show()","show()","show()","show()","show()","show()","show()","show()","show_decision_page()","show_for_author()","slug_from_path()","social_link()","solravailable()","spam()","spam()","spam()","spam_revisions()","stale()","status()","store()","store=()","streak()","subdomain()","subscribers()","subscribers()","subscriptions()","subscriptions()","subscriptions()","successful?()","suggested()","suggested()","tag()","tag_count()","tag_counts()","tagged_lat()","tagged_lon()","tagged_nodes_by_author()","tagname()","tagnames()","tagnames()","tagnames()","tagnames_as_classes()","tags()","tags()","tags()","tags()","tags()","tags()","techniques()","textsearch_all()","textsearch_maps()","textsearch_notes()","textsearch_profiles()","textsearch_questions()","textsearch_tags()","thread_participants()","title()","tms()","to_a()","to_i()","to_s()","to_tag()","toggle_like()","tool()","tools()","totalviews()","trending()","type()","uid()","uids_to_notify()","unanswered()","unban()","unban()","unfollow()","unlike()","unmoderate()","unmoderate()","unsuccessful?()","update()","update()","update()","update()","update()","update()","update()","updated_at()","updated_at()","updated_month()","upgrades()","upgrades()","upgrades_grid()","url_for_user()","user()","user()","user()","user()","user()","user_page()","user_tags()","user_xrds()","useremail()","username()","users()","users()","users()","using_new_site?()","using_open_id?()","valid?()","validate()","validate()","weekly_comment_tally()","weekly_note_tally()","weekly_tallies()","weekly_tallies()","widget()","wiki_edit_streak()","wikis()","wikis_grid()","readme"],"longSearchIndex":["actionview","actionview::base","actionview::helpers","actionview::helpers::dynamicform","actionview::helpers::dynamicform::formbuildermethods","actionview::helpers::dynamicform::instancetagmethods","actionview::helpers::formbuilder","actionview::helpers::instancetag","activerecord","admincontroller","adminhelper","adminmailer","answer","answerlikecontroller","answermailer","answerselection","answerscontroller","applicationcontroller","applicationhelper","authlogic","authlogic::session","authlogicopenid","authlogicopenid::actsasauthentic","authlogicopenid::actsasauthentic::config","authlogicopenid::actsasauthentic::methods","authlogicopenid::session","authlogicopenid::session::config","authlogicopenid::session::methods","authlogicopenid::version","comment","commentcontroller","commenthelper","commenthelper::commenterror","commentmailer","commentsshared","doclist","doclist::entity","doclist::entity::docresult","doclist::entity::searchrequest","docresult","docresult::entity","drupalcontentfieldimagegallery","drupalcontentfieldmapeditor","drupalcontentfieldmapper","drupalcontenttypemap","drupalfile","drupalmainimage","drupalprofilefield","drupalprofilevalue","drupalupload","drupaluser","editorcontroller","featurescontroller","featureshelper","homecontroller","homehelper","image","imagescontroller","legacycontroller","likecontroller","mapcontroller","maphelper","node","nodeselection","nodeshared","nodetag","notescontroller","noteshelper","object","openidauthentication","openidauthentication::result","openidcontroller","openidhelper","passwordresetmailer","questionscontroller","redirecthelper","relationship","relationshipscontroller","revision","searchrequest","searchrequest::entity","searchservice","searchescontroller","searcheshelper","settingscontroller","solrtoggle","spamaway","srch","srch::api","srch::api::doclist","srch::api::docresult","srch::api::searchrequest","srch::api::taglist","srch::api::tagresult","srch::search","srch::typeahead","srch::typeahead::taglist","statscontroller","subscriptioncontroller","subscriptionmailer","tableless","tag","tagcontroller","taghelper","taglist","taglist::entity","taglist::entity::tagresult","tagresult","tagresult::entity","tagselection","talkcontroller","typeaheadservice","uniqueurlvalidator","uniqueusernamevalidator","user","user::authlogic","user::authlogic::cryptoproviders","userselection","usersession","usersessionscontroller","usertag","usertagscontroller","usertagshelper","userscontroller","usershelper","welcomemailer","wikicontroller","wikihelper","authlogicopenid::version#<=>()","authlogicopenid::version::[]()","openidauthentication::result::[]()","answerscontroller#accept()","node#activities()","node::activities()","nodeshared::activities_grid()","homecontroller#activity()","subscriptioncontroller#add()","doclist#addall()","taglist#addall()","doclist#adddoc()","taglist#addtag()","node#add_barnstar()","node#add_comment()","openidcontroller#add_pape()","openidcontroller#add_sreg()","node#add_tag()","welcomemailer#add_to_list()","user#add_to_lists()","comment#answer_comment_notify()","commentcontroller#answer_create()","answer#answer_notify()","node#answered()","questionscontroller#answered()","openidcontroller#approved()","authlogicopenid::actsasauthentic::methods#attributes_to_save()","openidauthentication#authenticate_with_open_id()","commentsshared#author()","node#author()","nodetag#author()","notescontroller#author()","revision#author()","tagcontroller#author()","notescontroller#author_topic()","node#authors()","authlogicopenid::session::config#auto_register()","authlogicopenid::session::config#auto_register=()","authlogicopenid::session::config#auto_register_value()","admincontroller#ban()","drupaluser#ban()","node#barnstar()","tagcontroller#barnstar()","node#barnstars()","user#barnstars()","admincontroller#batch()","tag#belongs_to()","drupaluser#bio()","tagcontroller#blog()","answer#body()","comment#body()","node#body()","commentsshared#body_email()","revision#body_extras()","node#body_preview()","revision#body_preview()","revision#body_raw()","revision#body_rich()","node#can_tag()","drupalcontenttypemap#captured_on()","drupalcontenttypemap#cartographer_notes()","settingscontroller#change_locale()","user#coauthored_notes()","node#coauthors()","tableless::column()","actionview::helpers::dynamicform::instancetagmethods#column_type()","tableless::columns()","node#comment_count()","user#comment_streak()","comment::comment_weekly_tallies()","searchservice#comments()","typeaheadservice#comments()","userscontroller#comments()","wikicontroller#comments()","user#content_followed_in_past_period()","tag::contributor_count()","tagcontroller#contributors()","tagcontroller#contributors_index()","answerscontroller#create()","commentcontroller#create()","featurescontroller#create()","imagescontroller#create()","likecontroller#create()","mapcontroller#create()","notescontroller#create()","relationshipscontroller#create()","tagcontroller#create()","usersessionscontroller#create()","usertagscontroller#create()","userscontroller#create()","wikicontroller#create()","commentcontroller#create_by_token()","commenthelper#create_comment()","user#create_drupal_user()","comment#created_at()","drupaluser#created_at()","node#created_at()","revision#created_at()","authlogicopenid::session::methods#credentials=()","homecontroller#dashboard()","homecontroller#dashboard2()","openidcontroller#decision()","answerscontroller#delete()","commentcontroller#delete()","imagescontroller#delete()","likecontroller#delete()","mapcontroller#delete()","notescontroller#delete()","subscriptioncontroller#delete()","tagcontroller#delete()","usertagscontroller#delete()","wikicontroller#delete()","admincontroller#demote_basic()","drupalcontentfieldimagegallery#description()","nodetag#description()","relationshipscontroller#destroy()","usersessionscontroller#destroy()","user#destroy_drupal_user()","wikicontroller#diff()","node#drupal_content_field_image_gallery()","node#drupal_main_image()","nodetag#drupal_user()","user#drupal_user()","searchescontroller#dynamic()","featurescontroller#edit()","mapcontroller#edit()","notescontroller#edit()","userscontroller#edit()","wikicontroller#edit()","node#edit_path()","editorcontroller#editor()","drupaluser#email()","featurescontroller#embed()","actionview::helpers::dynamicform#error_message_on()","actionview::helpers::dynamicform::formbuildermethods#error_message_on()","actionview::helpers::dynamicform::formbuildermethods#error_messages()","actionview::helpers::dynamicform#error_messages_for()","tag::exists?()","usertag::exists?()","applicationhelper#feature()","homecontroller#fetch()","usertagshelper#fetch_tags()","drupalcontentfieldimagegallery#fid()","drupalcontentfieldimagegallery#file()","drupalupload#file()","legacycontroller#file()","image#filename()","node#files()","drupalfile#filetype()","image#filetype()","tag#filter_by_type()","authlogicopenid::session::config#find_by_openid_identifier_method()","authlogicopenid::session::config#find_by_openid_identifier_method=()","node::find_by_path()","searchservice#find_comments()","node::find_map()","searchservice#find_maps()","searchservice#find_pages()","tag::find_nodes_by_type()","tag::find_nodes_by_type_with_all_tags()","node::find_notes()","searchservice#find_notes()","tag::find_pages()","tag::find_popular_notes()","tag::find_research_notes()","searchservice#find_tags()","tag::find_top_nodes_by_type()","searchservice#find_users()","node::find_wiki()","drupaluser#first_time_poster()","user#first_time_poster()","user#follow()","subscriptioncontroller#followed()","tag::follower_count()","tag::followers()","userscontroller#followers()","comment#followers_of_mentioned_tags()","tag#followers_who_dont_follow_tags()","user#following()","userscontroller#following()","user#following?()","actionview::helpers::dynamicform#form()","searchrequest::fromrequest()","docresult::fromsearch()","tagresult::fromsearch()","homecontroller#front()","node#gallery()","node#generate_path()","user#generate_reset_key()","doclist#getdocs()","taglist#gettags()","node#get_matching_tags_without_aliasing()","spamaway::get_pairs()","user#get_value_of_power_tag()","nodeshared::graph_grid()","tagcontroller#gridsembed()","node#has_accepted_answers()","node#has_mailing_list?()","node#has_power_tag()","user#has_power_tag()","user#has_role()","node#has_tag()","user#has_tag()","node#has_tag_without_aliasing()","homecontroller#home()","spamaway#human_response?()","comment#icon()","node#icon()","comment#id()","node#id()","tag#id()","openidcontroller#idp_xrds()","drupalcontentfieldimagegallery#image()","notescontroller#image()","authlogicopenid::actsasauthentic::included()","authlogicopenid::actsasauthentic::methods::included()","authlogicopenid::session::included()","authlogicopenid::session::methods::included()","nodetag#increment_count()","commentcontroller#index()","featurescontroller#index()","likecontroller#index()","mapcontroller#index()","notescontroller#index()","openidcontroller#index()","questionscontroller#index()","statscontroller#index()","subscriptioncontroller#index()","tagcontroller#index()","wikicontroller#index()","userscontroller#info()","comment::inheritance_column()","drupalprofilefield::inheritance_column()","node::inheritance_column()","revision#inline_hashtags()","revision#inline_tags()","actionview::helpers::dynamicform#input()","applicationhelper#insert_extras()","node::instance_method_already_implemented?()","openidcontroller#is_authorized()","drupalfile#is_image?()","image#is_image?()","revision#is_initial?()","node#is_liked_by()","tag::is_powertag?()","drupaluser#last()","node#lat()","user#lat()","node#latest()","editorcontroller#legacy()","drupalcontenttypemap#license()","node::like()","drupaluser#like_count()","notescontroller#liked()","questionscontroller#liked()","wikicontroller#liked()","likecontroller#liked?()","nodeshared#liked_by()","drupaluser#liked_notes()","drupaluser#liked_pages()","notescontroller#liked_rss()","answer#likers()","node#likers()","answerlikecontroller#likes()","drupaluser#likes()","nodeshared#likes()","userscontroller#likes()","userscontroller#list()","applicationhelper#locale_name_pairs()","tagcontroller#location()","tagcontroller#location_modal()","applicationhelper#logged_in_as()","usersessionscontroller#logout_remotely()","node#lon()","user#lon()","node#mailing_list()","node#main_image()","commentcontroller#make_answer()","node#map()","authlogicopenid::actsasauthentic::methods#map_openid_registration()","authlogicopenid::actsasauthentic::methods#map_saved_attributes()","searchservice#maps()","typeaheadservice#maps()","admincontroller#mark_spam()","admincontroller#mark_spam_revision()","drupalcontenttypemap#max_zoom()","comment#mentioned_users()","node#mentioned_users()","openidauthentication::result#message()","wikicontroller#methods()","admincontroller#migrate()","drupaluser#migrate()","drupalcontenttypemap#min_zoom()","admincontroller#moderate()","drupaluser#moderate()","nodetag#name()","usertag#name()","homecontroller#nearby()","authlogicopenid::version::new()","doclist::new()","docresult::new()","featurescontroller#new()","imagescontroller#new()","mapcontroller#new()","openidauthentication::new()","openidauthentication::result::new()","questionscontroller#new()","searchrequest::new()","searchservice::new()","searchescontroller#new()","taglist::new()","tagresult::new()","typeaheadservice::new()","usersessionscontroller#new()","userscontroller#new()","wikicontroller#new()","node::new_node()","node::new_note()","node#new_revision()","node::new_wiki()","revision#next()","node#next_by_author()","comment#next_thread()","drupalupload#node()","legacycontroller#node()","drupaluser#node_count()","node#node_tags()","searchservice#nodes()","tag#nodes()","tag::nodes_for_period()","node#normal_tags()","legacycontroller#note_add()","drupaluser#note_count()","user#note_streak()","drupalcontenttypemap#notes()","drupaluser#notes()","legacycontroller#notes()","searchservice#notes()","typeaheadservice#notes()","user#notes()","drupaluser#notes_for_tags()","nodeshared::notes_grid()","nodeshared::notes_map()","nodeshared::notes_map_by_tag()","comment#notify()","commentmailer#notify()","node#notify()","answermailer#notify_answer_accept()","commentmailer#notify_answer_author()","answermailer#notify_answer_like()","answermailer#notify_answer_likers_author()","adminmailer#notify_author_of_approval()","commentmailer#notify_barnstar()","commentmailer#notify_callout()","comment#notify_callout_users()","adminmailer#notify_moderators_of_approval()","adminmailer#notify_moderators_of_spam()","subscriptionmailer#notify_node_creation()","adminmailer#notify_node_moderators()","commentmailer#notify_note_author()","subscriptionmailer#notify_note_liked()","answermailer#notify_question_author()","subscriptionmailer#notify_tag_added()","comment#notify_tag_followers()","commentmailer#notify_tag_followers()","comment#notify_users()","legacycontroller#openid()","authlogicopenid::actsasauthentic::methods#openid_identifier=()","authlogicopenid::session::methods#openid_identifier=()","authlogicopenid::actsasauthentic::config#openid_optional_fields()","authlogicopenid::actsasauthentic::config#openid_optional_fields=()","authlogicopenid::actsasauthentic::config#openid_required_fields()","authlogicopenid::actsasauthentic::config#openid_required_fields=()","legacycontroller#openid_username()","legacycontroller#page_add()","comment#parent()","revision#parent()","commentsshared#parent_commenter_uids()","commentsshared#parent_liker_uids()","commentsshared#parent_reviser_uids()","drupalfile#path()","image#path()","node#path()","revision#path()","user#path()","legacycontroller#people()","nodeshared::people_grid()","nodeshared::people_map()","userscontroller#photo()","user#photo_path()","legacycontroller#place()","notescontroller#places()","notescontroller#popular()","questionscontroller#popular()","wikicontroller#popular()","editorcontroller#post()","node#power_tag()","node#power_tag_objects()","node#power_tags()","usertag#preprocess()","node#prev_by_author()","revision#previous()","userscontroller#profile()","user#profile_image()","drupaluser#profile_values()","admincontroller#promote_admin()","admincontroller#promote_moderator()","admincontroller#publish()","node#publish()","revision#publish()","admincontroller#publish_revision()","drupalcontenttypemap#published_on()","node#questions()","node::questions()","user#questions()","nodeshared::questions_grid()","admincontroller#queue()","statscontroller#range()","notescontroller#raw()","wikicontroller#raw()","legacycontroller#register()","revision#render_body()","revision#render_body_email()","applicationhelper#render_map()","openidcontroller#render_response()","openidcontroller#render_xrds()","node#replace()","wikicontroller#replace()","legacycontroller#report()","node::research_notes()","userscontroller#reset()","passwordresetmailer#reset_notify()","admincontroller#reset_user_password()","node#responded_to()","node#response_count()","node#responses()","searchescontroller#results()","openidcontroller#resume()","wikicontroller#revert()","wikicontroller#revision()","node#revision_count()","node#revisions()","wikicontroller#revisions()","editorcontroller#rich()","drupaluser#role()","wikicontroller#root()","legacycontroller#rss()","notescontroller#rss()","tagcontroller#rss()","userscontroller#rss()","notescontroller#rsvp()","tag#run_count()","tagselection#ruser()","authlogicopenid::actsasauthentic::methods#save()","authlogicopenid::session::methods#save()","tableless#save()","comment::search()","node::search()","user::search()","typeaheadservice#search_all()","typeaheadservice#search_maps()","typeaheadservice#search_notes()","typeaheadservice#search_profiles()","typeaheadservice#search_questions()","typeaheadservice#search_tags()","typeaheadservice#search_wikis()","openidcontroller#server()","taglist#setsrchparams=()","answerselection::set_likes()","user#set_token()","revision#setup()","notescontroller#shortlink()","questionscontroller#shortlink()","solrtoggle#shouldindexsolr()","answerlikecontroller#show()","likecontroller#show()","mapcontroller#show()","notescontroller#show()","questionscontroller#show()","tagcontroller#show()","talkcontroller#show()","wikicontroller#show()","openidcontroller#show_decision_page()","tagcontroller#show_for_author()","node#slug_from_path()","user#social_link()","solrtoggle#solravailable()","admincontroller#spam()","node#spam()","revision#spam()","admincontroller#spam_revisions()","wikicontroller#stale()","openidauthentication::result#status()","openidauthentication::store()","openidauthentication::store=()","user#streak()","wikicontroller#subdomain()","node#subscribers()","tag::subscribers()","statscontroller#subscriptions()","tag#subscriptions()","user#subscriptions()","openidauthentication::result#successful?()","tagcontroller#suggested()","usertagscontroller#suggested()","mapcontroller#tag()","subscriptioncontroller#tag_count()","drupaluser#tag_counts()","node#tagged_lat()","node#tagged_lon()","tag::tagged_nodes_by_author()","tagselection#tagname()","drupaluser#tagnames()","node#tagnames()","user#tagnames()","node#tagnames_as_classes()","comment#tags()","drupaluser#tags()","node#tags()","searchservice#tags()","typeaheadservice#tags()","user#tags()","wikicontroller#techniques()","searchservice#textsearch_all()","searchservice#textsearch_maps()","searchservice#textsearch_notes()","searchservice#textsearch_profiles()","searchservice#textsearch_questions()","searchservice#textsearch_tags()","comment#thread_participants()","user#title()","drupalcontenttypemap#tms()","authlogicopenid::version#to_a()","authlogicopenid::version#to_i()","authlogicopenid::version#to_s()","actionview::helpers::dynamicform::instancetagmethods#to_tag()","node#toggle_like()","legacycontroller#tool()","notescontroller#tools()","node#totalviews()","tag::trending()","comment#type()","user#uid()","commentsshared#uids_to_notify()","questionscontroller#unanswered()","admincontroller#unban()","drupaluser#unban()","user#unfollow()","node::unlike()","admincontroller#unmoderate()","drupaluser#unmoderate()","openidauthentication::result#unsuccessful?()","answerscontroller#update()","commentcontroller#update()","featurescontroller#update()","mapcontroller#update()","notescontroller#update()","userscontroller#update()","wikicontroller#update()","node#updated_at()","revision#updated_at()","node#updated_month()","node#upgrades()","node::upgrades()","nodeshared::upgrades_grid()","openidhelper#url_for_user()","answerselection#user()","drupaluser#user()","nodeselection#user()","nodetag#user()","tagselection#user()","openidcontroller#user_page()","drupaluser#user_tags()","openidcontroller#user_xrds()","admincontroller#useremail()","drupaluser#username()","admincontroller#users()","searchservice#users()","typeaheadservice#users()","drupaluser#using_new_site?()","openidauthentication#using_open_id?()","searchrequest#valid?()","uniqueurlvalidator#validate()","uniqueusernamevalidator#validate()","user#weekly_comment_tally()","user#weekly_note_tally()","node::weekly_tallies()","tag#weekly_tallies()","tagcontroller#widget()","user#wiki_edit_streak()","typeaheadservice#wikis()","nodeshared::wikis_grid()",""],"info":[["ActionView","","ActionView.html","",""],["ActionView::Base","","ActionView/Base.html","",""],["ActionView::Helpers","","ActionView/Helpers.html","",""],["ActionView::Helpers::DynamicForm","","ActionView/Helpers/DynamicForm.html","","<p>The Active Record Helper makes it easier to create forms for records kept\nin instance variables. The …\n"],["ActionView::Helpers::DynamicForm::FormBuilderMethods","","ActionView/Helpers/DynamicForm/FormBuilderMethods.html","",""],["ActionView::Helpers::DynamicForm::InstanceTagMethods","","ActionView/Helpers/DynamicForm/InstanceTagMethods.html","",""],["ActionView::Helpers::FormBuilder","","ActionView/Helpers/FormBuilder.html","",""],["ActionView::Helpers::InstanceTag","","ActionView/Helpers/InstanceTag.html","",""],["ActiveRecord","","ActiveRecord.html","",""],["AdminController","","AdminController.html","",""],["AdminHelper","","AdminHelper.html","",""],["AdminMailer","","AdminMailer.html","",""],["Answer","","Answer.html","",""],["AnswerLikeController","","AnswerLikeController.html","",""],["AnswerMailer","","AnswerMailer.html","",""],["AnswerSelection","","AnswerSelection.html","",""],["AnswersController","","AnswersController.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Authlogic","","Authlogic.html","",""],["Authlogic::Session","","Authlogic/Session.html","",""],["AuthlogicOpenid","","AuthlogicOpenid.html","","<p>This module is responsible for adding OpenID functionality to Authlogic.\nCheckout the README for more …\n"],["AuthlogicOpenid::ActsAsAuthentic","","AuthlogicOpenid/ActsAsAuthentic.html","","<p>This module is responsible for adding in the OpenID functionality to your\nmodels. It hooks itself into …\n"],["AuthlogicOpenid::ActsAsAuthentic::Config","","AuthlogicOpenid/ActsAsAuthentic/Config.html","",""],["AuthlogicOpenid::ActsAsAuthentic::Methods","","AuthlogicOpenid/ActsAsAuthentic/Methods.html","",""],["AuthlogicOpenid::Session","","AuthlogicOpenid/Session.html","","<p>This module is responsible for adding all of the OpenID goodness to the\nAuthlogic::Session::Base class. …\n"],["AuthlogicOpenid::Session::Config","","AuthlogicOpenid/Session/Config.html","",""],["AuthlogicOpenid::Session::Methods","","AuthlogicOpenid/Session/Methods.html","",""],["AuthlogicOpenid::Version","","AuthlogicOpenid/Version.html","","<p>A class for describing the current version of a library. The version\nconsists of three parts: the <code>major</code> …\n"],["Comment","","Comment.html","",""],["CommentController","","CommentController.html","",""],["CommentHelper","","CommentHelper.html","",""],["CommentHelper::CommentError","","CommentHelper/CommentError.html","",""],["CommentMailer","","CommentMailer.html","",""],["CommentsShared","","CommentsShared.html","","<p>Active Support concerns are a good way to use modules that can used across\ndifferent models Refer to …\n"],["DocList","","DocList.html","","<p>List of documents returned from a search\n"],["DocList::Entity","","DocList/Entity.html","","<p>This subclass is used to auto-generate the RESTful data structure.  It is\ngenerally not useful for internal …\n"],["DocList::Entity::DocResult","","DocList/Entity/DocResult.html","",""],["DocList::Entity::SearchRequest","","DocList/Entity/SearchRequest.html","",""],["DocResult","","DocResult.html","","<p>A DocResult is an individual return item for a document (web page) search\n"],["DocResult::Entity","","DocResult/Entity.html","","<p>This subclass is used to auto-generate the RESTful data structure.  It is\ngenerally not useful for internal …\n"],["DrupalContentFieldImageGallery","","DrupalContentFieldImageGallery.html","",""],["DrupalContentFieldMapEditor","","DrupalContentFieldMapEditor.html","",""],["DrupalContentFieldMapper","","DrupalContentFieldMapper.html","",""],["DrupalContentTypeMap","","DrupalContentTypeMap.html","",""],["DrupalFile","","DrupalFile.html","",""],["DrupalMainImage","","DrupalMainImage.html","",""],["DrupalProfileField","","DrupalProfileField.html","",""],["DrupalProfileValue","","DrupalProfileValue.html","",""],["DrupalUpload","","DrupalUpload.html","",""],["DrupalUser","","DrupalUser.html","",""],["EditorController","","EditorController.html","",""],["FeaturesController","","FeaturesController.html","",""],["FeaturesHelper","","FeaturesHelper.html","",""],["HomeController","","HomeController.html","",""],["HomeHelper","","HomeHelper.html","",""],["Image","","Image.html","",""],["ImagesController","","ImagesController.html","",""],["LegacyController","","LegacyController.html","",""],["LikeController","","LikeController.html","",""],["MapController","","MapController.html","",""],["MapHelper","","MapHelper.html","",""],["Node","","Node.html","",""],["NodeSelection","","NodeSelection.html","",""],["NodeShared","","NodeShared.html","",""],["NodeTag","","NodeTag.html","",""],["NotesController","","NotesController.html","",""],["NotesHelper","","NotesHelper.html","",""],["Object","","Object.html","",""],["OpenIdAuthentication","","OpenIdAuthentication.html","",""],["OpenIdAuthentication::Result","","OpenIdAuthentication/Result.html","",""],["OpenidController","","OpenidController.html","",""],["OpenidHelper","","OpenidHelper.html","",""],["PasswordResetMailer","","PasswordResetMailer.html","",""],["QuestionsController","","QuestionsController.html","",""],["RedirectHelper","","RedirectHelper.html","",""],["Relationship","","Relationship.html","",""],["RelationshipsController","","RelationshipsController.html","",""],["Revision","","Revision.html","",""],["SearchRequest","","SearchRequest.html","","<p>Class encapsulating search requests.\n"],["SearchRequest::Entity","","SearchRequest/Entity.html","","<p>This subclass is used to auto-generate the RESTful data structure.  It is\ngenerally not useful for internal …\n"],["SearchService","","SearchService.html","","<p>The SearchService class is a utility class whose purpose is to provide\ndetailed responses to queries …\n"],["SearchesController","","SearchesController.html","",""],["SearchesHelper","","SearchesHelper.html","",""],["SettingsController","","SettingsController.html","",""],["SolrToggle","","SolrToggle.html","",""],["Spamaway","","Spamaway.html","",""],["Srch","","Srch.html","",""],["Srch::API","","Srch/API.html","",""],["Srch::API::DocList","","Srch/API/DocList.html","",""],["Srch::API::DocResult","","Srch/API/DocResult.html","",""],["Srch::API::SearchRequest","","Srch/API/SearchRequest.html","",""],["Srch::API::TagList","","Srch/API/TagList.html","",""],["Srch::API::TagResult","","Srch/API/TagResult.html","",""],["Srch::Search","","Srch/Search.html","",""],["Srch::Typeahead","","Srch/Typeahead.html","",""],["Srch::Typeahead::TagList","","Srch/Typeahead/TagList.html","",""],["StatsController","","StatsController.html","",""],["SubscriptionController","","SubscriptionController.html","","<p>for now, adapting like_controller for just tag following.  We can create\nswitches for different kinds …\n"],["SubscriptionMailer","","SubscriptionMailer.html","",""],["Tableless","","Tableless.html","","<p>stackoverflow.com/questions/937429/activerecordbase-without-table Models\nwithout Tables\n"],["Tag","","Tag.html","",""],["TagController","","TagController.html","",""],["TagHelper","","TagHelper.html","",""],["TagList","","TagList.html","","<p>List of tag values from a search\n"],["TagList::Entity","","TagList/Entity.html","","<p>This subclass is used to auto-generate the RESTful data structure.  It is\ngenerally not useful for internal …\n"],["TagList::Entity::TagResult","","TagList/Entity/TagResult.html","",""],["TagResult","","TagResult.html","","<p>Tags are text values assigned to various site documents.\n"],["TagResult::Entity","","TagResult/Entity.html","","<p>This subclass is used to auto-generate the RESTful data structure.  It is\ngenerally not useful for internal …\n"],["TagSelection","","TagSelection.html","",""],["TalkController","","TalkController.html","",""],["TypeaheadService","","TypeaheadService.html","","<p>The TypeaheadService class is a utility class whose purpose is to provide\nfast responses to text queries …\n"],["UniqueUrlValidator","","UniqueUrlValidator.html","",""],["UniqueUsernameValidator","","UniqueUsernameValidator.html","",""],["User","","User.html","",""],["User::Authlogic","","User/Authlogic.html","",""],["User::Authlogic::CryptoProviders","","User/Authlogic/CryptoProviders.html","",""],["UserSelection","","UserSelection.html","",""],["UserSession","","UserSession.html","",""],["UserSessionsController","","UserSessionsController.html","",""],["UserTag","","UserTag.html","",""],["UserTagsController","","UserTagsController.html","",""],["UserTagsHelper","","UserTagsHelper.html","",""],["UsersController","","UsersController.html","",""],["UsersHelper","","UsersHelper.html","",""],["WelcomeMailer","","WelcomeMailer.html","",""],["WikiController","","WikiController.html","",""],["WikiHelper","","WikiHelper.html","",""],["<=>","AuthlogicOpenid::Version","AuthlogicOpenid/Version.html#method-i-3C-3D-3E","(version)","<p>Compare this version to the given <code>version</code> object.\n"],["[]","AuthlogicOpenid::Version","AuthlogicOpenid/Version.html#method-c-5B-5D","(major, minor, tiny)","<p>A convenience method for instantiating a new Version instance with the\ngiven <code>major</code>, <code>minor</code>, and <code>tiny</code>\ncomponents. …\n"],["[]","OpenIdAuthentication::Result","OpenIdAuthentication/Result.html#method-c-5B-5D","(code)",""],["accept","AnswersController","AnswersController.html#method-i-accept","()",""],["activities","Node","Node.html#method-i-activities","()","<p>so we can quickly fetch activities corresponding to this node with\nnode.activities\n"],["activities","Node","Node.html#method-c-activities","(tagname)","<p>so we can call Node.activities(&#39;balloon-mapping&#39;)\n"],["activities_grid","NodeShared","NodeShared.html#method-c-activities_grid","(body)",""],["activity","HomeController","HomeController.html#method-i-activity","()",""],["add","SubscriptionController","SubscriptionController.html#method-i-add","()","<p>for the current user, register as liking the given tag\n"],["addAll","DocList","DocList.html#method-i-addAll","(dlist)",""],["addAll","TagList","TagList.html#method-i-addAll","(tlist)",""],["addDoc","DocList","DocList.html#method-i-addDoc","(ndoc)",""],["addTag","TagList","TagList.html#method-i-addTag","(ntag)",""],["add_barnstar","Node","Node.html#method-i-add_barnstar","(tagname, giver)",""],["add_comment","Node","Node.html#method-i-add_comment","(params = {})","<p>\n<p>Automated constructors for associated models\n"],["add_pape","OpenidController","OpenidController.html#method-i-add_pape","(oidreq, oidresp)",""],["add_sreg","OpenidController","OpenidController.html#method-i-add_sreg","(oidreq, oidresp)",""],["add_tag","Node","Node.html#method-i-add_tag","(tagname, user)",""],["add_to_list","WelcomeMailer","WelcomeMailer.html#method-i-add_to_list","(user, list)","<p>PasswordResetMailer.reset_notify(user).deliver\n"],["add_to_lists","User","User.html#method-i-add_to_lists","(lists)",""],["answer_comment_notify","Comment","Comment.html#method-i-answer_comment_notify","(current_user)",""],["answer_create","CommentController","CommentController.html#method-i-answer_create","()","<p>create answer comments\n"],["answer_notify","Answer","Answer.html#method-i-answer_notify","(current_user)",""],["answered","Node","Node.html#method-i-answered","()",""],["answered","QuestionsController","QuestionsController.html#method-i-answered","()",""],["approved","OpenidController","OpenidController.html#method-i-approved","(trust_root)",""],["attributes_to_save","AuthlogicOpenid::ActsAsAuthentic::Methods","AuthlogicOpenid/ActsAsAuthentic/Methods.html#method-i-attributes_to_save","()","<p>This method works in conjunction with map_saved_attributes.\n<p>Let&#39;s say a user fills out a registration …\n"],["authenticate_with_open_id","OpenIdAuthentication","OpenIdAuthentication.html#method-i-authenticate_with_open_id","(identifier = nil, options = {}, &block)",""],["author","CommentsShared","CommentsShared.html#method-i-author","()",""],["author","Node","Node.html#method-i-author","()",""],["author","NodeTag","NodeTag.html#method-i-author","()",""],["author","NotesController","NotesController.html#method-i-author","()","<p>notes for a given author\n"],["author","Revision","Revision.html#method-i-author","()",""],["author","TagController","TagController.html#method-i-author","()",""],["author_topic","NotesController","NotesController.html#method-i-author_topic","()","<p>notes for given comma-delimited tags params for author\n"],["authors","Node","Node.html#method-i-authors","()","<p>for wikis:\n"],["auto_register","AuthlogicOpenid::Session::Config","AuthlogicOpenid/Session/Config.html#method-i-auto_register","(value=true)","<p>Add this in your Session object to Auto Register a new user using openid\nvia sreg\n"],["auto_register=","AuthlogicOpenid::Session::Config","AuthlogicOpenid/Session/Config.html#method-i-auto_register-3D","(value=true)",""],["auto_register_value","AuthlogicOpenid::Session::Config","AuthlogicOpenid/Session/Config.html#method-i-auto_register_value","(value=nil)",""],["ban","AdminController","AdminController.html#method-i-ban","()",""],["ban","DrupalUser","DrupalUser.html#method-i-ban","()",""],["barnstar","Node","Node.html#method-i-barnstar","()",""],["barnstar","TagController","TagController.html#method-i-barnstar","()",""],["barnstars","Node","Node.html#method-i-barnstars","()",""],["barnstars","User","User.html#method-i-barnstars","()",""],["batch","AdminController","AdminController.html#method-i-batch","()",""],["belongs_to","Tag","Tag.html#method-i-belongs_to","(current_user, nid)",""],["bio","DrupalUser","DrupalUser.html#method-i-bio","()",""],["blog","TagController","TagController.html#method-i-blog","()",""],["body","Answer","Answer.html#method-i-body","()",""],["body","Comment","Comment.html#method-i-body","()",""],["body","Node","Node.html#method-i-body","()",""],["body_email","CommentsShared","CommentsShared.html#method-i-body_email","(host = 'publiclab.org')","<p>filtered version additionally appending http/https\n\n<pre>protocol to protocol-relative URLslike &quot;/foo&quot;</pre>\n"],["body_extras","Revision","Revision.html#method-i-body_extras","(content)",""],["body_preview","Node","Node.html#method-i-body_preview","(length = 100)",""],["body_preview","Revision","Revision.html#method-i-body_preview","(length = 100)",""],["body_raw","Revision","Revision.html#method-i-body_raw","()",""],["body_rich","Revision","Revision.html#method-i-body_rich","()","<p>some adaptations for the new rich editor\n"],["can_tag","Node","Node.html#method-i-can_tag","(tagname, user, errors = false)",""],["captured_on","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-captured_on","()",""],["cartographer_notes","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-cartographer_notes","()",""],["change_locale","SettingsController","SettingsController.html#method-i-change_locale","()","<p>Check the locale was passed and if it is a valid one, set the locale in\ncookies\n"],["coauthored_notes","User","User.html#method-i-coauthored_notes","()",""],["coauthors","Node","Node.html#method-i-coauthors","()",""],["column","Tableless","Tableless.html#method-c-column","(name, sql_type = nil, default = nil, null = true)",""],["column_type","ActionView::Helpers::DynamicForm::InstanceTagMethods","ActionView/Helpers/DynamicForm/InstanceTagMethods.html#method-i-column_type","()",""],["columns","Tableless","Tableless.html#method-c-columns","()",""],["comment_count","Node","Node.html#method-i-comment_count","()",""],["comment_streak","User","User.html#method-i-comment_streak","(span = 365)",""],["comment_weekly_tallies","Comment","Comment.html#method-c-comment_weekly_tallies","(span = 52, time = Time.now)",""],["comments","SearchService","SearchService.html#method-i-comments","()",""],["comments","TypeaheadService","TypeaheadService.html#method-i-comments","(input, limit = 5)",""],["comments","UsersController","UsersController.html#method-i-comments","()",""],["comments","WikiController","WikiController.html#method-i-comments","()",""],["content_followed_in_past_period","User","User.html#method-i-content_followed_in_past_period","(time_period)",""],["contributor_count","Tag","Tag.html#method-c-contributor_count","(tagname)",""],["contributors","TagController","TagController.html#method-i-contributors","()",""],["contributors_index","TagController","TagController.html#method-i-contributors_index","()","<p>/contributors\n"],["create","AnswersController","AnswersController.html#method-i-create","()",""],["create","CommentController","CommentController.html#method-i-create","()","<p>handle some errors!!!!!! create node comments\n"],["create","FeaturesController","FeaturesController.html#method-i-create","()",""],["create","ImagesController","ImagesController.html#method-i-create","()",""],["create","LikeController","LikeController.html#method-i-create","()","<p>for the current user, register as liking the given node\n"],["create","MapController","MapController.html#method-i-create","()","<p>must require min_zoom and lat/lon location, and TMS URL solving this by\nmin_zoom default here, but need …\n"],["create","NotesController","NotesController.html#method-i-create","()",""],["create","RelationshipsController","RelationshipsController.html#method-i-create","()",""],["create","TagController","TagController.html#method-i-create","()",""],["create","UserSessionsController","UserSessionsController.html#method-i-create","()",""],["create","UserTagsController","UserTagsController.html#method-i-create","()",""],["create","UsersController","UsersController.html#method-i-create","()",""],["create","WikiController","WikiController.html#method-i-create","()",""],["create_by_token","CommentController","CommentController.html#method-i-create_by_token","()",""],["create_comment","CommentHelper","CommentHelper.html#method-i-create_comment","(node, user, body)",""],["create_drupal_user","User","User.html#method-i-create_drupal_user","()",""],["created_at","Comment","Comment.html#method-i-created_at","()",""],["created_at","DrupalUser","DrupalUser.html#method-i-created_at","()","<p>Rails-style adaptors:\n"],["created_at","Node","Node.html#method-i-created_at","()",""],["created_at","Revision","Revision.html#method-i-created_at","()",""],["credentials=","AuthlogicOpenid::Session::Methods","AuthlogicOpenid/Session/Methods.html#method-i-credentials-3D","(value)","<p>Hooks into credentials so that you can pass an :openid_identifier key.\n"],["dashboard","HomeController","HomeController.html#method-i-dashboard","()",""],["dashboard2","HomeController","HomeController.html#method-i-dashboard2","()",""],["decision","OpenidController","OpenidController.html#method-i-decision","()",""],["delete","AnswersController","AnswersController.html#method-i-delete","()",""],["delete","CommentController","CommentController.html#method-i-delete","()",""],["delete","ImagesController","ImagesController.html#method-i-delete","()",""],["delete","LikeController","LikeController.html#method-i-delete","()","<p>for the current user, remove the like from the given node\n"],["delete","MapController","MapController.html#method-i-delete","()",""],["delete","NotesController","NotesController.html#method-i-delete","()","<p>at /notes/delete/:id only for notes\n"],["delete","SubscriptionController","SubscriptionController.html#method-i-delete","()","<p>for the current user, remove the like from the given tag\n"],["delete","TagController","TagController.html#method-i-delete","()","<p>should delete only the term_node/node_tag (instance), not the term_data\n(class)\n"],["delete","UserTagsController","UserTagsController.html#method-i-delete","()",""],["delete","WikiController","WikiController.html#method-i-delete","()",""],["demote_basic","AdminController","AdminController.html#method-i-demote_basic","()",""],["description","DrupalContentFieldImageGallery","DrupalContentFieldImageGallery.html#method-i-description","()",""],["description","NodeTag","NodeTag.html#method-i-description","()",""],["destroy","RelationshipsController","RelationshipsController.html#method-i-destroy","()",""],["destroy","UserSessionsController","UserSessionsController.html#method-i-destroy","()",""],["destroy_drupal_user","User","User.html#method-i-destroy_drupal_user","()",""],["diff","WikiController","WikiController.html#method-i-diff","()",""],["drupal_content_field_image_gallery","Node","Node.html#method-i-drupal_content_field_image_gallery","()","<p>was unable to set up this relationship properly with ActiveRecord\nassociations\n"],["drupal_main_image","Node","Node.html#method-i-drupal_main_image","()","<p>was unable to set up this relationship properly with ActiveRecord\nassociations\n"],["drupal_user","NodeTag","NodeTag.html#method-i-drupal_user","()",""],["drupal_user","User","User.html#method-i-drupal_user","()","<p>this is ridiculous. We need to store uid in this model. …migration is in\nprogress. start getting rid …\n"],["dynamic","SearchesController","SearchesController.html#method-i-dynamic","()","<p>Dynamic Search Page using pure JavaScript JSON RESTful API\n"],["edit","FeaturesController","FeaturesController.html#method-i-edit","()",""],["edit","MapController","MapController.html#method-i-edit","()",""],["edit","NotesController","NotesController.html#method-i-edit","()",""],["edit","UsersController","UsersController.html#method-i-edit","()",""],["edit","WikiController","WikiController.html#method-i-edit","()",""],["edit_path","Node","Node.html#method-i-edit_path","()",""],["editor","EditorController","EditorController.html#method-i-editor","()",""],["email","DrupalUser","DrupalUser.html#method-i-email","()",""],["embed","FeaturesController","FeaturesController.html#method-i-embed","()",""],["error_message_on","ActionView::Helpers::DynamicForm","ActionView/Helpers/DynamicForm.html#method-i-error_message_on","(object, method, *args)","<p>Returns a string containing the error message attached to the\n<code>method</code> on the <code>object</code> if one exists. This …\n"],["error_message_on","ActionView::Helpers::DynamicForm::FormBuilderMethods","ActionView/Helpers/DynamicForm/FormBuilderMethods.html#method-i-error_message_on","(method, *args)",""],["error_messages","ActionView::Helpers::DynamicForm::FormBuilderMethods","ActionView/Helpers/DynamicForm/FormBuilderMethods.html#method-i-error_messages","(options = {})",""],["error_messages_for","ActionView::Helpers::DynamicForm","ActionView/Helpers/DynamicForm.html#method-i-error_messages_for","(*params)","<p>Returns a string with a <code>DIV</code> containing all of the error\nmessages for the objects located as instance …\n"],["exists?","Tag","Tag.html#method-c-exists-3F","(tagname, nid)",""],["exists?","UserTag","UserTag.html#method-c-exists-3F","(uid, value)",""],["feature","ApplicationHelper","ApplicationHelper.html#method-i-feature","(title)",""],["fetch","HomeController","HomeController.html#method-i-fetch","()","<p>proxy to enable AJAX loading of RSS feeds, which requires same-origin\n"],["fetch_tags","UserTagsHelper","UserTagsHelper.html#method-i-fetch_tags","(uid, type)",""],["fid","DrupalContentFieldImageGallery","DrupalContentFieldImageGallery.html#method-i-fid","()",""],["file","DrupalContentFieldImageGallery","DrupalContentFieldImageGallery.html#method-i-file","()",""],["file","DrupalUpload","DrupalUpload.html#method-i-file","()",""],["file","LegacyController","LegacyController.html#method-i-file","()",""],["filename","Image","Image.html#method-i-filename","()",""],["files","Node","Node.html#method-i-files","()",""],["filetype","DrupalFile","DrupalFile.html#method-i-filetype","()",""],["filetype","Image","Image.html#method-i-filetype","()",""],["filter_by_type","Tag","Tag.html#method-i-filter_by_type","(type, limit = 10)",""],["find_by_openid_identifier_method","AuthlogicOpenid::Session::Config","AuthlogicOpenid/Session/Config.html#method-i-find_by_openid_identifier_method","(value = nil)","<p>What method should we call to find a record by the openid_identifier? This\nis useful if you want to store …\n"],["find_by_openid_identifier_method=","AuthlogicOpenid::Session::Config","AuthlogicOpenid/Session/Config.html#method-i-find_by_openid_identifier_method-3D","(value = nil)",""],["find_by_path","Node","Node.html#method-c-find_by_path","(title)",""],["find_comments","SearchService","SearchService.html#method-i-find_comments","(input, limit = 5)",""],["find_map","Node","Node.html#method-c-find_map","(name, date)",""],["find_maps","SearchService","SearchService.html#method-i-find_maps","(input, limit = 5)",""],["find_nodes","SearchService","SearchService.html#method-i-find_nodes","(input, limit = 5)",""],["find_nodes_by_type","Tag","Tag.html#method-c-find_nodes_by_type","(tagnames, type = 'note', limit = 10)","<p>finds recent nodes - should drop “limit” and allow use of chainable\n.limit()\n"],["find_nodes_by_type_with_all_tags","Tag","Tag.html#method-c-find_nodes_by_type_with_all_tags","(tagnames, type = 'note', limit = 10)",""],["find_notes","Node","Node.html#method-c-find_notes","(author, date, title)",""],["find_notes","SearchService","SearchService.html#method-i-find_notes","(input, limit = 5)","<p>search for node title only FIXme with solr\n"],["find_pages","Tag","Tag.html#method-c-find_pages","(tagnames, limit = 10)","<p>just like find_nodes_by_type, but searches wiki pages, places, and tools\n"],["find_popular_notes","Tag","Tag.html#method-c-find_popular_notes","(tagname, views = 20, limit = 10)",""],["find_research_notes","Tag","Tag.html#method-c-find_research_notes","(tagnames, limit = 10)",""],["find_tags","SearchService","SearchService.html#method-i-find_tags","(input, limit = 5)",""],["find_top_nodes_by_type","Tag","Tag.html#method-c-find_top_nodes_by_type","(tagname, type = 'wiki', limit = 10)","<p>finds highest viewcount nodes\n"],["find_users","SearchService","SearchService.html#method-i-find_users","(input, limit = 10)",""],["find_wiki","Node","Node.html#method-c-find_wiki","(title)",""],["first_time_poster","DrupalUser","DrupalUser.html#method-i-first_time_poster","()",""],["first_time_poster","User","User.html#method-i-first_time_poster","()",""],["follow","User","User.html#method-i-follow","(other_user)",""],["followed","SubscriptionController","SubscriptionController.html#method-i-followed","()","<p>for the current user, return whether is presently liked or not\n"],["follower_count","Tag","Tag.html#method-c-follower_count","(tagname)",""],["followers","Tag","Tag.html#method-c-followers","(tagname)",""],["followers","UsersController","UsersController.html#method-i-followers","()",""],["followers_of_mentioned_tags","Comment","Comment.html#method-i-followers_of_mentioned_tags","()",""],["followers_who_dont_follow_tags","Tag","Tag.html#method-i-followers_who_dont_follow_tags","(tags)",""],["following","User","User.html#method-i-following","(tagname)",""],["following","UsersController","UsersController.html#method-i-following","()",""],["following?","User","User.html#method-i-following-3F","(other_user)",""],["form","ActionView::Helpers::DynamicForm","ActionView/Helpers/DynamicForm.html#method-i-form","(record_name, options = {})","<p>Returns an entire form with all needed input tags for a specified Active\nRecord object. For example, …\n"],["fromRequest","SearchRequest","SearchRequest.html#method-c-fromRequest","(rparams)",""],["fromSearch","DocResult","DocResult.html#method-c-fromSearch","(idval, typeval, urlval, titleval, sumval, scoreval)",""],["fromSearch","TagResult","TagResult.html#method-c-fromSearch","(tid, tval, ttype, tsrc)",""],["front","HomeController","HomeController.html#method-i-front","()","<p>route for seeing the front page even if you are logged in\n"],["gallery","Node","Node.html#method-i-gallery","()",""],["generate_path","Node","Node.html#method-i-generate_path","()","<p>should only be run at actual creation time – or, we should refactor to us\nnode.created instead of Time.now …\n"],["generate_reset_key","User","User.html#method-i-generate_reset_key","()",""],["getDocs","DocList","DocList.html#method-i-getDocs","()",""],["getTags","TagList","TagList.html#method-i-getTags","()",""],["get_matching_tags_without_aliasing","Node","Node.html#method-i-get_matching_tags_without_aliasing","(tagname)","<p>can return multiple Tag records – we don&#39;t yet hard-enforce uniqueness,\nbut should soon then, this …\n"],["get_pairs","Spamaway","Spamaway.html#method-c-get_pairs","(how_many)",""],["get_value_of_power_tag","User","User.html#method-i-get_value_of_power_tag","(key)",""],["graph_grid","NodeShared","NodeShared.html#method-c-graph_grid","(body, _page = 1)","<p>rubular regex: rubular.com/r/hBEThNL4qd\n"],["gridsEmbed","TagController","TagController.html#method-i-gridsEmbed","()",""],["has_accepted_answers","Node","Node.html#method-i-has_accepted_answers","()",""],["has_mailing_list?","Node","Node.html#method-i-has_mailing_list-3F","()","<p>\n<p>Tag-related methods\n"],["has_power_tag","Node","Node.html#method-i-has_power_tag","(key)","<p>power tags have “key:value” format, and should be searched with a “key:*”\nwildcard …\n"],["has_power_tag","User","User.html#method-i-has_power_tag","(key)","<p>power tags have “key:value” format, and should be searched with a “key:*”\nwildcard …\n"],["has_role","User","User.html#method-i-has_role","(r)","<p>we can revise/improve this for m2m later…\n"],["has_tag","Node","Node.html#method-i-has_tag","(tagname)","<p>accests a tagname /or/ tagname ending in wildcard such as “tagnam*” also\nsearches for other …\n"],["has_tag","User","User.html#method-i-has_tag","(tagname)",""],["has_tag_without_aliasing","Node","Node.html#method-i-has_tag_without_aliasing","(tagname)",""],["home","HomeController","HomeController.html#method-i-home","()","<p>caches_action :index, :cache_path =&gt; { :last =&gt;\nNode.find(:last).updated_at.to_i }\n"],["human_response?","Spamaway","Spamaway.html#method-i-human_response-3F","(response)",""],["icon","Comment","Comment.html#method-i-icon","()",""],["icon","Node","Node.html#method-i-icon","()","<p>used in typeahead autocomplete search results\n"],["id","Comment","Comment.html#method-i-id","()",""],["id","Node","Node.html#method-i-id","()","<p>view adaptors for typical rails db conventions so we can migrate someday\n"],["id","Tag","Tag.html#method-i-id","()","<p>validates :name, :uniqueness =&gt; { case_sensitive: false  }\n"],["idp_xrds","OpenidController","OpenidController.html#method-i-idp_xrds","()",""],["image","DrupalContentFieldImageGallery","DrupalContentFieldImageGallery.html#method-i-image","()",""],["image","NotesController","NotesController.html#method-i-image","()",""],["included","AuthlogicOpenid::ActsAsAuthentic","AuthlogicOpenid/ActsAsAuthentic.html#method-c-included","(klass)","<p>Adds in the neccesary modules for acts_as_authentic to include and also\ndisabled password validation …\n"],["included","AuthlogicOpenid::ActsAsAuthentic::Methods","AuthlogicOpenid/ActsAsAuthentic/Methods.html#method-c-included","(klass)","<p>Set up some simple validations\n"],["included","AuthlogicOpenid::Session","AuthlogicOpenid/Session.html#method-c-included","(klass)","<p>Add a simple openid_identifier attribute and some validations for the\nfield.\n"],["included","AuthlogicOpenid::Session::Methods","AuthlogicOpenid/Session/Methods.html#method-c-included","(klass)",""],["increment_count","NodeTag","NodeTag.html#method-i-increment_count","()",""],["index","CommentController","CommentController.html#method-i-index","()",""],["index","FeaturesController","FeaturesController.html#method-i-index","()",""],["index","LikeController","LikeController.html#method-i-index","()","<p>list all recent likes\n"],["index","MapController","MapController.html#method-i-index","()",""],["index","NotesController","NotesController.html#method-i-index","()",""],["index","OpenidController","OpenidController.html#method-i-index","()",""],["index","QuestionsController","QuestionsController.html#method-i-index","()",""],["index","StatsController","StatsController.html#method-i-index","()",""],["index","SubscriptionController","SubscriptionController.html#method-i-index","()",""],["index","TagController","TagController.html#method-i-index","()",""],["index","WikiController","WikiController.html#method-i-index","()",""],["info","UsersController","UsersController.html#method-i-info","()",""],["inheritance_column","Comment","Comment.html#method-c-inheritance_column","()",""],["inheritance_column","DrupalProfileField","DrupalProfileField.html#method-c-inheritance_column","()",""],["inheritance_column","Node","Node.html#method-c-inheritance_column","()","<p>making drupal and rails database conventions play nice; &#39;type&#39; is a\nreserved word in rails\n"],["inline_hashtags","Revision","Revision.html#method-i-inline_hashtags","()","<p>search for inline hashtags(such as #hashtag) and create a new tag\n"],["inline_tags","Revision","Revision.html#method-i-inline_tags","()","<p>search for inline special tags such as [question:foo]\n"],["input","ActionView::Helpers::DynamicForm","ActionView/Helpers/DynamicForm.html#method-i-input","(record_name, method, options = {})","<p>Returns a default input tag for the type of object returned by the method.\nFor example, if <code>@post</code> has …\n"],["insert_extras","ApplicationHelper","ApplicationHelper.html#method-i-insert_extras","(body)",""],["instance_method_already_implemented?","Node","Node.html#method-c-instance_method_already_implemented-3F","(method_name)",""],["is_authorized","OpenidController","OpenidController.html#method-i-is_authorized","(identity_url, trust_root)",""],["is_image?","DrupalFile","DrupalFile.html#method-i-is_image-3F","()",""],["is_image?","Image","Image.html#method-i-is_image-3F","()",""],["is_initial?","Revision","Revision.html#method-i-is_initial-3F","()",""],["is_liked_by","Node","Node.html#method-i-is_liked_by","(user)",""],["is_powertag?","Tag","Tag.html#method-c-is_powertag-3F","(tagname)",""],["last","DrupalUser","DrupalUser.html#method-i-last","()","<p>last node\n"],["lat","Node","Node.html#method-i-lat","()",""],["lat","User","User.html#method-i-lat","()",""],["latest","Node","Node.html#method-i-latest","()",""],["legacy","EditorController","EditorController.html#method-i-legacy","()","<p>main image via URL passed as GET param\n"],["license","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-license","()",""],["like","Node","Node.html#method-c-like","(nid , user)",""],["like_count","DrupalUser","DrupalUser.html#method-i-like_count","()",""],["liked","NotesController","NotesController.html#method-i-liked","()","<p>notes with high # of likes\n"],["liked","QuestionsController","QuestionsController.html#method-i-liked","()",""],["liked","WikiController","WikiController.html#method-i-liked","()",""],["liked?","LikeController","LikeController.html#method-i-liked-3F","()","<p>for the current user, return whether is presently liked or not\n"],["liked_by","NodeShared","NodeShared.html#method-i-liked_by","(uid)",""],["liked_notes","DrupalUser","DrupalUser.html#method-i-liked_notes","()",""],["liked_pages","DrupalUser","DrupalUser.html#method-i-liked_pages","()",""],["liked_rss","NotesController","NotesController.html#method-i-liked_rss","()",""],["likers","Answer","Answer.html#method-i-likers","()","<p>users who like this answer\n"],["likers","Node","Node.html#method-i-likers","()","<p>users who like this node\n"],["likes","AnswerLikeController","AnswerLikeController.html#method-i-likes","()",""],["likes","DrupalUser","DrupalUser.html#method-i-likes","()",""],["likes","NodeShared","NodeShared.html#method-i-likes","()",""],["likes","UsersController","UsersController.html#method-i-likes","()",""],["list","UsersController","UsersController.html#method-i-list","()",""],["locale_name_pairs","ApplicationHelper","ApplicationHelper.html#method-i-locale_name_pairs","()",""],["location","TagController","TagController.html#method-i-location","()",""],["location_modal","TagController","TagController.html#method-i-location_modal","()",""],["logged_in_as","ApplicationHelper","ApplicationHelper.html#method-i-logged_in_as","(roles)","<p>returns true if user is logged in and has any of the roles given, as\n[&#39;admin&#39;,&#39;moderator&#39;] …\n"],["logout_remotely","UserSessionsController","UserSessionsController.html#method-i-logout_remotely","()",""],["lon","Node","Node.html#method-i-lon","()",""],["lon","User","User.html#method-i-lon","()",""],["mailing_list","Node","Node.html#method-i-mailing_list","()","<p>has it been tagged with “list:foo” where “foo” is the name of a Google\nGroup?\n"],["main_image","Node","Node.html#method-i-main_image","(node_type = :all)","<p>provide either a Drupally main_image or a Railsy one\n"],["make_answer","CommentController","CommentController.html#method-i-make_answer","()",""],["map","Node","Node.html#method-i-map","()",""],["map_openid_registration","AuthlogicOpenid::ActsAsAuthentic::Methods","AuthlogicOpenid/ActsAsAuthentic/Methods.html#method-i-map_openid_registration","(registration)","<p>Override this method to map the OpenID registration fields with fields in\nyour model. See the required_fields …\n"],["map_saved_attributes","AuthlogicOpenid::ActsAsAuthentic::Methods","AuthlogicOpenid/ActsAsAuthentic/Methods.html#method-i-map_saved_attributes","(attrs)","<p>This method works in conjunction with attributes_to_save. See that method\nfor a description of the why …\n"],["maps","SearchService","SearchService.html#method-i-maps","(params)",""],["maps","TypeaheadService","TypeaheadService.html#method-i-maps","(input, limit = 5)",""],["mark_spam","AdminController","AdminController.html#method-i-mark_spam","()",""],["mark_spam_revision","AdminController","AdminController.html#method-i-mark_spam_revision","()",""],["max_zoom","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-max_zoom","()",""],["mentioned_users","Comment","Comment.html#method-i-mentioned_users","()",""],["mentioned_users","Node","Node.html#method-i-mentioned_users","()",""],["message","OpenIdAuthentication::Result","OpenIdAuthentication/Result.html#method-i-message","()",""],["methods","WikiController","WikiController.html#method-i-methods","()",""],["migrate","AdminController","AdminController.html#method-i-migrate","()",""],["migrate","DrupalUser","DrupalUser.html#method-i-migrate","()",""],["min_zoom","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-min_zoom","()",""],["moderate","AdminController","AdminController.html#method-i-moderate","()",""],["moderate","DrupalUser","DrupalUser.html#method-i-moderate","()",""],["name","NodeTag","NodeTag.html#method-i-name","()",""],["name","UserTag","UserTag.html#method-i-name","()",""],["nearby","HomeController","HomeController.html#method-i-nearby","()","<p>trashy… clean this up! this will eventually be based on the profile_tags\ndata where people can mark …\n"],["new","AuthlogicOpenid::Version","AuthlogicOpenid/Version.html#method-c-new","(major, minor, tiny)","<p>Create a new Version object with the given components.\n"],["new","DocList","DocList.html#method-c-new","()",""],["new","DocResult","DocResult.html#method-c-new","()",""],["new","FeaturesController","FeaturesController.html#method-i-new","()",""],["new","ImagesController","ImagesController.html#method-i-new","()",""],["new","MapController","MapController.html#method-i-new","()",""],["new","OpenIdAuthentication","OpenIdAuthentication.html#method-c-new","(app)",""],["new","OpenIdAuthentication::Result","OpenIdAuthentication/Result.html#method-c-new","(code)",""],["new","QuestionsController","QuestionsController.html#method-i-new","()",""],["new","SearchRequest","SearchRequest.html#method-c-new","()",""],["new","SearchService","SearchService.html#method-c-new","()",""],["new","SearchesController","SearchesController.html#method-i-new","()","<p>/search/\n"],["new","TagList","TagList.html#method-c-new","()",""],["new","TagResult","TagResult.html#method-c-new","()",""],["new","TypeaheadService","TypeaheadService.html#method-c-new","()",""],["new","UserSessionsController","UserSessionsController.html#method-i-new","()",""],["new","UsersController","UsersController.html#method-i-new","()",""],["new","WikiController","WikiController.html#method-i-new","()",""],["new_node","Node","Node.html#method-c-new_node","(params)","<p>same as new_note or new_wiki but with arbitrary type – use for maps, DRY\nout new_note and new_wiki\n"],["new_note","Node","Node.html#method-c-new_note","(params)","<p>handle creating a new note with attached revision and main image this is\nkind of egregiously bad… must …\n"],["new_revision","Node","Node.html#method-i-new_revision","(params)",""],["new_wiki","Node","Node.html#method-c-new_wiki","(params)",""],["next","Revision","Revision.html#method-i-next","()",""],["next_by_author","Node","Node.html#method-i-next_by_author","()",""],["next_thread","Comment","Comment.html#method-i-next_thread","()",""],["node","DrupalUpload","DrupalUpload.html#method-i-node","()",""],["node","LegacyController","LegacyController.html#method-i-node","()","<p>publiclaboratory.org/node/5853\n"],["node_count","DrupalUser","DrupalUser.html#method-i-node_count","()",""],["node_tags","Node","Node.html#method-i-node_tags","()",""],["nodes","SearchService","SearchService.html#method-i-nodes","(params)",""],["nodes","Tag","Tag.html#method-i-nodes","()","<p>nodes this tag has been used on; no wildcards\n"],["nodes_for_period","Tag","Tag.html#method-c-nodes_for_period","(type, nids, start, finish)",""],["normal_tags","Node","Node.html#method-i-normal_tags","()","<p>return whole community_tag objects but no powertags or “event”\n"],["note_add","LegacyController","LegacyController.html#method-i-note_add","()",""],["note_count","DrupalUser","DrupalUser.html#method-i-note_count","()",""],["note_streak","User","User.html#method-i-note_streak","(span = 365)",""],["notes","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-notes","()",""],["notes","DrupalUser","DrupalUser.html#method-i-notes","()",""],["notes","LegacyController","LegacyController.html#method-i-notes","()",""],["notes","SearchService","SearchService.html#method-i-notes","(params)",""],["notes","TypeaheadService","TypeaheadService.html#method-i-notes","(input, limit = 5)",""],["notes","User","User.html#method-i-notes","()",""],["notes_for_tags","DrupalUser","DrupalUser.html#method-i-notes_for_tags","(tagnames)","<p>accepts array of tag names (strings)\n"],["notes_grid","NodeShared","NodeShared.html#method-c-notes_grid","(body, _page = 1)","<p>rubular regex: rubular.com/r/hBEThNL4qd\n"],["notes_map","NodeShared","NodeShared.html#method-c-notes_map","(body)",""],["notes_map_by_tag","NodeShared","NodeShared.html#method-c-notes_map_by_tag","(body)",""],["notify","Comment","Comment.html#method-i-notify","(current_user)","<p>email all users in this thread plus all who&#39;ve starred it\n"],["notify","CommentMailer","CommentMailer.html#method-i-notify","(user, comment)","<p>CommentMailer.notify_of_comment(user,self).deliver\n"],["notify","Node","Node.html#method-i-notify","()",""],["notify_answer_accept","AnswerMailer","AnswerMailer.html#method-i-notify_answer_accept","(user, answer)",""],["notify_answer_author","CommentMailer","CommentMailer.html#method-i-notify_answer_author","(user, comment)",""],["notify_answer_like","AnswerMailer","AnswerMailer.html#method-i-notify_answer_like","(user, answer)",""],["notify_answer_likers_author","AnswerMailer","AnswerMailer.html#method-i-notify_answer_likers_author","(user, answer)",""],["notify_author_of_approval","AdminMailer","AdminMailer.html#method-i-notify_author_of_approval","(node, moderator)",""],["notify_barnstar","CommentMailer","CommentMailer.html#method-i-notify_barnstar","(user, note)","<p>user is awarder, not awardee\n"],["notify_callout","CommentMailer","CommentMailer.html#method-i-notify_callout","(comment, user)",""],["notify_callout_users","Comment","Comment.html#method-i-notify_callout_users","()",""],["notify_moderators_of_approval","AdminMailer","AdminMailer.html#method-i-notify_moderators_of_approval","(node, moderator)","<p>Will this further bait spammers? If we don&#39;t, will non-spammers whose\nposts were moderated get confused? …\n"],["notify_moderators_of_spam","AdminMailer","AdminMailer.html#method-i-notify_moderators_of_spam","(node, moderator)",""],["notify_node_creation","SubscriptionMailer","SubscriptionMailer.html#method-i-notify_node_creation","(node)",""],["notify_node_moderators","AdminMailer","AdminMailer.html#method-i-notify_node_moderators","(node)",""],["notify_note_author","CommentMailer","CommentMailer.html#method-i-notify_note_author","(user, comment)",""],["notify_note_liked","SubscriptionMailer","SubscriptionMailer.html#method-i-notify_note_liked","(node, user)",""],["notify_question_author","AnswerMailer","AnswerMailer.html#method-i-notify_question_author","(user, answer)",""],["notify_tag_added","SubscriptionMailer","SubscriptionMailer.html#method-i-notify_tag_added","(node, tag, current_user)",""],["notify_tag_followers","Comment","Comment.html#method-i-notify_tag_followers","(already_mailed_uids = [])",""],["notify_tag_followers","CommentMailer","CommentMailer.html#method-i-notify_tag_followers","(comment, user)",""],["notify_users","Comment","Comment.html#method-i-notify_users","(uids, current_user)",""],["openid","LegacyController","LegacyController.html#method-i-openid","()",""],["openid_identifier=","AuthlogicOpenid::ActsAsAuthentic::Methods","AuthlogicOpenid/ActsAsAuthentic/Methods.html#method-i-openid_identifier-3D","(value)","<p>Set the openid_identifier field and also resets the persistence_token if\nthis value changes.\n"],["openid_identifier=","AuthlogicOpenid::Session::Methods","AuthlogicOpenid/Session/Methods.html#method-i-openid_identifier-3D","(value)",""],["openid_optional_fields","AuthlogicOpenid::ActsAsAuthentic::Config","AuthlogicOpenid/ActsAsAuthentic/Config.html#method-i-openid_optional_fields","(value = nil)","<p>Same as required_fields, but optional instead.\n<p><code>Default:</code> []\n<p><code>Accepts:</code> Array of symbols\n"],["openid_optional_fields=","AuthlogicOpenid::ActsAsAuthentic::Config","AuthlogicOpenid/ActsAsAuthentic/Config.html#method-i-openid_optional_fields-3D","(value = nil)",""],["openid_required_fields","AuthlogicOpenid::ActsAsAuthentic::Config","AuthlogicOpenid/ActsAsAuthentic/Config.html#method-i-openid_required_fields","(value = nil)","<p>Some OpenID providers support a lightweight profile exchange protocol, for\nthose that do, you can require …\n"],["openid_required_fields=","AuthlogicOpenid::ActsAsAuthentic::Config","AuthlogicOpenid/ActsAsAuthentic/Config.html#method-i-openid_required_fields-3D","(value = nil)",""],["openid_username","LegacyController","LegacyController.html#method-i-openid_username","()",""],["page_add","LegacyController","LegacyController.html#method-i-page_add","()",""],["parent","Comment","Comment.html#method-i-parent","()",""],["parent","Revision","Revision.html#method-i-parent","()",""],["parent_commenter_uids","CommentsShared","CommentsShared.html#method-i-parent_commenter_uids","()",""],["parent_liker_uids","CommentsShared","CommentsShared.html#method-i-parent_liker_uids","()",""],["parent_reviser_uids","CommentsShared","CommentsShared.html#method-i-parent_reviser_uids","()",""],["path","DrupalFile","DrupalFile.html#method-i-path","(size = :default)","<p>swap legacy Drupal static routes\n"],["path","Image","Image.html#method-i-path","(size = :medium)",""],["path","Node","Node.html#method-i-path","(type = :default)","<p>can switch to a “question-style” path if specified\n"],["path","Revision","Revision.html#method-i-path","()",""],["path","User","User.html#method-i-path","()",""],["people","LegacyController","LegacyController.html#method-i-people","()",""],["people_grid","NodeShared","NodeShared.html#method-c-people_grid","(body, _page = 1)","<p>in our interface, “users” are known as “people” because it&#39;s more human\n"],["people_map","NodeShared","NodeShared.html#method-c-people_map","(body, _page = 1)","<p>in our interface, “users” are known as “people” because it&#39;s more human\n"],["photo","UsersController","UsersController.html#method-i-photo","()",""],["photo_path","User","User.html#method-i-photo_path","(size = :medium)",""],["place","LegacyController","LegacyController.html#method-i-place","()",""],["places","NotesController","NotesController.html#method-i-places","()",""],["popular","NotesController","NotesController.html#method-i-popular","()","<p>notes with high # of views\n"],["popular","QuestionsController","QuestionsController.html#method-i-popular","()",""],["popular","WikiController","WikiController.html#method-i-popular","()",""],["post","EditorController","EditorController.html#method-i-post","()",""],["power_tag","Node","Node.html#method-i-power_tag","(tag)","<p>returns the value for the most recent power tag of form key:value\n"],["power_tag_objects","Node","Node.html#method-i-power_tag_objects","(tag)","<p>returns all power tag results as whole community_tag objects\n"],["power_tags","Node","Node.html#method-i-power_tags","(tag)","<p>returns all tagnames for a given power tag\n"],["preprocess","UserTag","UserTag.html#method-i-preprocess","()",""],["prev_by_author","Node","Node.html#method-i-prev_by_author","()",""],["previous","Revision","Revision.html#method-i-previous","()",""],["profile","UsersController","UsersController.html#method-i-profile","()",""],["profile_image","User","User.html#method-i-profile_image","()",""],["profile_values","DrupalUser","DrupalUser.html#method-i-profile_values","()",""],["promote_admin","AdminController","AdminController.html#method-i-promote_admin","()",""],["promote_moderator","AdminController","AdminController.html#method-i-promote_moderator","()",""],["publish","AdminController","AdminController.html#method-i-publish","()",""],["publish","Node","Node.html#method-i-publish","()",""],["publish","Revision","Revision.html#method-i-publish","()",""],["publish_revision","AdminController","AdminController.html#method-i-publish_revision","()",""],["published_on","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-published_on","()",""],["questions","Node","Node.html#method-i-questions","()","<p>so we can quickly fetch questions corresponding to this node with\nnode.questions\n"],["questions","Node","Node.html#method-c-questions","()","<p>all questions\n"],["questions","User","User.html#method-i-questions","()",""],["questions_grid","NodeShared","NodeShared.html#method-c-questions_grid","(body, _page = 1)","<p>rubular regex: rubular.com/r/hBEThNL4qd\n"],["queue","AdminController","AdminController.html#method-i-queue","()",""],["range","StatsController","StatsController.html#method-i-range","()",""],["raw","NotesController","NotesController.html#method-i-raw","()","<p>display a revision, raw\n"],["raw","WikiController","WikiController.html#method-i-raw","()","<p>display a revision, raw\n"],["register","LegacyController","LegacyController.html#method-i-register","()","<p>def image\n\n<pre># sites/default/files/imagecache/thumb/san-martin-spectro.jpg\nredirect_to &quot;//i.publiclab.org/sites/default/files/imagecache/&quot;+params[:size]+&quot;/&quot;+params[:filename]+&quot;.&quot;+params[:format], ...</pre>\n"],["render_body","Revision","Revision.html#method-i-render_body","()","<p>filtered version of node content\n"],["render_body_email","Revision","Revision.html#method-i-render_body_email","(host = 'publiclab.org')","<p>filtered version additionally appending http/https protocol to\nprotocol-relative URLs like “/foo” …\n"],["render_map","ApplicationHelper","ApplicationHelper.html#method-i-render_map","(lat, lon, items)",""],["render_response","OpenidController","OpenidController.html#method-i-render_response","(oidresp)",""],["render_xrds","OpenidController","OpenidController.html#method-i-render_xrds","(types)",""],["replace","Node","Node.html#method-i-replace","(before, after, user)",""],["replace","WikiController","WikiController.html#method-i-replace","()","<p>replace subsection of wiki body\n"],["report","LegacyController","LegacyController.html#method-i-report","()",""],["research_notes","Node","Node.html#method-c-research_notes","()",""],["reset","UsersController","UsersController.html#method-i-reset","()",""],["reset_notify","PasswordResetMailer","PasswordResetMailer.html#method-i-reset_notify","(user, key)","<p>PasswordResetMailer.reset_notify(user).deliver\n"],["reset_user_password","AdminController","AdminController.html#method-i-reset_user_password","()",""],["responded_to","Node","Node.html#method-i-responded_to","(key = 'response')","<p>Nodes this node is responding to with a `response:&lt;nid&gt;` power tag;\nThe key word “response” …\n"],["response_count","Node","Node.html#method-i-response_count","(key = 'response')","<p>Nodes that respond to this node with a `response:&lt;nid&gt;` power tag;\nThe key word “response” …\n"],["responses","Node","Node.html#method-i-responses","(key = 'response')","<p>Nodes that respond to this node with a `response:&lt;nid&gt;` power tag;\nThe key word “response” …\n"],["results","SearchesController","SearchesController.html#method-i-results","()","<p>results: /search/foo\n"],["resume","OpenidController","OpenidController.html#method-i-resume","()",""],["revert","WikiController","WikiController.html#method-i-revert","()",""],["revision","WikiController","WikiController.html#method-i-revision","()",""],["revision_count","Node","Node.html#method-i-revision_count","()",""],["revisions","Node","Node.html#method-i-revisions","()",""],["revisions","WikiController","WikiController.html#method-i-revisions","()",""],["rich","EditorController","EditorController.html#method-i-rich","()",""],["role","DrupalUser","DrupalUser.html#method-i-role","()","<p>End rails-style adaptors\n"],["root","WikiController","WikiController.html#method-i-root","()","<p>wiki pages which have a root URL, like /about also just redirect anything\nelse matching /<em>__</em> to /wiki/ …\n"],["rss","LegacyController","LegacyController.html#method-i-rss","()",""],["rss","NotesController","NotesController.html#method-i-rss","()",""],["rss","TagController","TagController.html#method-i-rss","()",""],["rss","UsersController","UsersController.html#method-i-rss","()",""],["rsvp","NotesController","NotesController.html#method-i-rsvp","()",""],["run_count","Tag","Tag.html#method-i-run_count","()",""],["ruser","TagSelection","TagSelection.html#method-i-ruser","()",""],["save","AuthlogicOpenid::ActsAsAuthentic::Methods","AuthlogicOpenid/ActsAsAuthentic/Methods.html#method-i-save","(perform_validation = true, &block)","<p>This is where all of the magic happens. This is where we hook in and add\nall of the OpenID sweetness. …\n"],["save","AuthlogicOpenid::Session::Methods","AuthlogicOpenid/Session/Methods.html#method-i-save","(&block)","<p>Cleaers out the block if we are authenticating with OpenID, so that we can\nredirect without a DoubleRender …\n"],["save","Tableless","Tableless.html#method-i-save","(validate = true)","<p>Override the save method to prevent exceptions.\n"],["search","Comment","Comment.html#method-c-search","(query)",""],["search","Node","Node.html#method-c-search","(query)",""],["search","User","User.html#method-c-search","(query)",""],["search_all","TypeaheadService","TypeaheadService.html#method-i-search_all","(srchString, limit = 5)","<p>Run a search in any of the associated systems for references that contain\nthe search string\n"],["search_maps","TypeaheadService","TypeaheadService.html#method-i-search_maps","(srchString, limit = 5)","<p>Search maps for matching text\n"],["search_notes","TypeaheadService","TypeaheadService.html#method-i-search_notes","(srchString, limit = 5)","<p>Search notes for matching strings\n"],["search_profiles","TypeaheadService","TypeaheadService.html#method-i-search_profiles","(srchString, limit = 5)","<p>Search profiles for matching text\n"],["search_questions","TypeaheadService","TypeaheadService.html#method-i-search_questions","(srchString, limit = 5)","<p>Search question entries for matching text\n"],["search_tags","TypeaheadService","TypeaheadService.html#method-i-search_tags","(srchString, limit = 5)","<p>Search tag values for matching text\n"],["search_wikis","TypeaheadService","TypeaheadService.html#method-i-search_wikis","(srchString, limit = 5)","<p>Search wikis for matching strings\n"],["server","OpenidController","OpenidController.html#method-i-server","()",""],["setSrchParams=","TagList","TagList.html#method-i-setSrchParams-3D","(value)",""],["set_likes","AnswerSelection","AnswerSelection.html#method-c-set_likes","(uid, aid, value)",""],["set_token","User","User.html#method-i-set_token","()",""],["setup","Revision","Revision.html#method-i-setup","()",""],["shortlink","NotesController","NotesController.html#method-i-shortlink","()",""],["shortlink","QuestionsController","QuestionsController.html#method-i-shortlink","()",""],["shouldIndexSolr","SolrToggle","SolrToggle.html#method-i-shouldIndexSolr","()",""],["show","AnswerLikeController","AnswerLikeController.html#method-i-show","()",""],["show","LikeController","LikeController.html#method-i-show","()","<p>return a count of likes for a given node This does not support non-nodes\nvery well\n"],["show","MapController","MapController.html#method-i-show","()",""],["show","NotesController","NotesController.html#method-i-show","()",""],["show","QuestionsController","QuestionsController.html#method-i-show","()",""],["show","TagController","TagController.html#method-i-show","()",""],["show","TalkController","TalkController.html#method-i-show","()",""],["show","WikiController","WikiController.html#method-i-show","()",""],["show_decision_page","OpenidController","OpenidController.html#method-i-show_decision_page","(oidreq, message = 'Do you trust this site with your identity?')",""],["show_for_author","TagController","TagController.html#method-i-show_for_author","()",""],["slug_from_path","Node","Node.html#method-i-slug_from_path","()",""],["social_link","User","User.html#method-i-social_link","(site)",""],["solrAvailable","SolrToggle","SolrToggle.html#method-i-solrAvailable","()",""],["spam","AdminController","AdminController.html#method-i-spam","()",""],["spam","Node","Node.html#method-i-spam","()",""],["spam","Revision","Revision.html#method-i-spam","()",""],["spam_revisions","AdminController","AdminController.html#method-i-spam_revisions","()",""],["stale","WikiController","WikiController.html#method-i-stale","()",""],["status","OpenIdAuthentication::Result","OpenIdAuthentication/Result.html#method-i-status","()",""],["store","OpenIdAuthentication","OpenIdAuthentication.html#method-c-store","()",""],["store=","OpenIdAuthentication","OpenIdAuthentication.html#method-c-store-3D","(*store_option)",""],["streak","User","User.html#method-i-streak","(span = 365)",""],["subdomain","WikiController","WikiController.html#method-i-subdomain","()",""],["subscribers","Node","Node.html#method-i-subscribers","(conditions = false)","<p>tag- and node-based followers\n"],["subscribers","Tag","Tag.html#method-c-subscribers","(tags)","<p>Given a set of tags, return all users following those tags. Return a\ndictionary of tags indexed by user. …\n"],["subscriptions","StatsController","StatsController.html#method-i-subscriptions","()",""],["subscriptions","Tag","Tag.html#method-i-subscriptions","()",""],["subscriptions","User","User.html#method-i-subscriptions","(type = :tag)",""],["successful?","OpenIdAuthentication::Result","OpenIdAuthentication/Result.html#method-i-successful-3F","()",""],["suggested","TagController","TagController.html#method-i-suggested","()",""],["suggested","UserTagsController","UserTagsController.html#method-i-suggested","()",""],["tag","MapController","MapController.html#method-i-tag","()",""],["tag_count","SubscriptionController","SubscriptionController.html#method-i-tag_count","()","<p>return a count of subscriptions for a given tag\n"],["tag_counts","DrupalUser","DrupalUser.html#method-i-tag_counts","()",""],["tagged_lat","Node","Node.html#method-i-tagged_lat","()","<p>these should eventually displace the above means of finding locations …they\nmay already be redundant …\n"],["tagged_lon","Node","Node.html#method-i-tagged_lon","()",""],["tagged_nodes_by_author","Tag","Tag.html#method-c-tagged_nodes_by_author","(tagname, user_id)","<p>select nodes by tagname and user_id\n"],["tagname","TagSelection","TagSelection.html#method-i-tagname","()",""],["tagnames","DrupalUser","DrupalUser.html#method-i-tagnames","(limit = 20, defaults = true)",""],["tagnames","Node","Node.html#method-i-tagnames","()",""],["tagnames","User","User.html#method-i-tagnames","(limit = 20, defaults = true)",""],["tagnames_as_classes","Node","Node.html#method-i-tagnames_as_classes","()","<p>Here we re-query to fetch /all/ tagnames; this is used in\n/views/notes/_notes.html.erb in a way that …\n"],["tags","Comment","Comment.html#method-i-tags","()",""],["tags","DrupalUser","DrupalUser.html#method-i-tags","(limit = 10)",""],["tags","Node","Node.html#method-i-tags","()",""],["tags","SearchService","SearchService.html#method-i-tags","(params)",""],["tags","TypeaheadService","TypeaheadService.html#method-i-tags","(input, limit = 5)",""],["tags","User","User.html#method-i-tags","(limit = 10)",""],["techniques","WikiController","WikiController.html#method-i-techniques","()",""],["textSearch_all","SearchService","SearchService.html#method-i-textSearch_all","(srchString)","<p>Run a search in any of the associated systems for references that contain\nthe search string\n"],["textSearch_maps","SearchService","SearchService.html#method-i-textSearch_maps","(srchString)","<p>Search maps for matching text\n"],["textSearch_notes","SearchService","SearchService.html#method-i-textSearch_notes","(srchString)","<p>Search notes for matching strings\n"],["textSearch_profiles","SearchService","SearchService.html#method-i-textSearch_profiles","(srchString)","<p>Search profiles for matching text\n"],["textSearch_questions","SearchService","SearchService.html#method-i-textSearch_questions","(srchString)","<p>Search question entries for matching text\n"],["textSearch_tags","SearchService","SearchService.html#method-i-textSearch_tags","(srchString)","<p>Search documents with matching tag values The search string that is passed\nin is split into tokens, and …\n"],["thread_participants","Comment","Comment.html#method-i-thread_participants","()","<p>users who are involved in this comment thread\n"],["title","User","User.html#method-i-title","()",""],["tms","DrupalContentTypeMap","DrupalContentTypeMap.html#method-i-tms","()",""],["to_a","AuthlogicOpenid::Version","AuthlogicOpenid/Version.html#method-i-to_a","()",""],["to_i","AuthlogicOpenid::Version","AuthlogicOpenid/Version.html#method-i-to_i","()","<p>Converts this version to a canonical integer that may be compared against\nother version objects.\n"],["to_s","AuthlogicOpenid::Version","AuthlogicOpenid/Version.html#method-i-to_s","()","<p>Converts this version object to a string, where each of the three version\ncomponents are joined by the …\n"],["to_tag","ActionView::Helpers::DynamicForm::InstanceTagMethods","ActionView/Helpers/DynamicForm/InstanceTagMethods.html#method-i-to_tag","(options = {})",""],["toggle_like","Node","Node.html#method-i-toggle_like","(user)",""],["tool","LegacyController","LegacyController.html#method-i-tool","()",""],["tools","NotesController","NotesController.html#method-i-tools","()",""],["totalviews","Node","Node.html#method-i-totalviews","()",""],["trending","Tag","Tag.html#method-c-trending","(limit = 5 , start_date = DateTime.now - 1.month , end_date = DateTime.now)",""],["type","Comment","Comment.html#method-i-type","()",""],["uid","User","User.html#method-i-uid","()",""],["uids_to_notify","CommentsShared","CommentsShared.html#method-i-uids_to_notify","()",""],["unanswered","QuestionsController","QuestionsController.html#method-i-unanswered","()",""],["unban","AdminController","AdminController.html#method-i-unban","()",""],["unban","DrupalUser","DrupalUser.html#method-i-unban","()",""],["unfollow","User","User.html#method-i-unfollow","(other_user)",""],["unlike","Node","Node.html#method-c-unlike","(nid , user)",""],["unmoderate","AdminController","AdminController.html#method-i-unmoderate","()",""],["unmoderate","DrupalUser","DrupalUser.html#method-i-unmoderate","()",""],["unsuccessful?","OpenIdAuthentication::Result","OpenIdAuthentication/Result.html#method-i-unsuccessful-3F","()",""],["update","AnswersController","AnswersController.html#method-i-update","()",""],["update","CommentController","CommentController.html#method-i-update","()",""],["update","FeaturesController","FeaturesController.html#method-i-update","()",""],["update","MapController","MapController.html#method-i-update","()",""],["update","NotesController","NotesController.html#method-i-update","()","<p>at /notes/update/:id\n"],["update","UsersController","UsersController.html#method-i-update","()",""],["update","WikiController","WikiController.html#method-i-update","()",""],["updated_at","Node","Node.html#method-i-updated_at","()",""],["updated_at","Revision","Revision.html#method-i-updated_at","()",""],["updated_month","Node","Node.html#method-i-updated_month","()",""],["upgrades","Node","Node.html#method-i-upgrades","()","<p>so we can quickly fetch upgrades corresponding to this node with\nnode.upgrades\n"],["upgrades","Node","Node.html#method-c-upgrades","(tagname)","<p>so we can call Node.upgrades(&#39;balloon-mapping&#39;)\n"],["upgrades_grid","NodeShared","NodeShared.html#method-c-upgrades_grid","(body)",""],["url_for_user","OpenidHelper","OpenidHelper.html#method-i-url_for_user","()",""],["user","AnswerSelection","AnswerSelection.html#method-i-user","()",""],["user","DrupalUser","DrupalUser.html#method-i-user","()",""],["user","NodeSelection","NodeSelection.html#method-i-user","()",""],["user","NodeTag","NodeTag.html#method-i-user","()",""],["user","TagSelection","TagSelection.html#method-i-user","()",""],["user_page","OpenidController","OpenidController.html#method-i-user_page","()",""],["user_tags","DrupalUser","DrupalUser.html#method-i-user_tags","()",""],["user_xrds","OpenidController","OpenidController.html#method-i-user_xrds","()",""],["useremail","AdminController","AdminController.html#method-i-useremail","()",""],["username","DrupalUser","DrupalUser.html#method-i-username","()",""],["users","AdminController","AdminController.html#method-i-users","()",""],["users","SearchService","SearchService.html#method-i-users","(params)",""],["users","TypeaheadService","TypeaheadService.html#method-i-users","(input, limit = 5)","<p>search_users() returns a standard TagResult;  users() returns an array of\nUser records It&#39;s unclear …\n"],["using_new_site?","DrupalUser","DrupalUser.html#method-i-using_new_site-3F","()",""],["using_open_id?","OpenIdAuthentication","OpenIdAuthentication.html#method-i-using_open_id-3F","(identifier = nil)","<p>The parameter name of “openid_identifier” is used rather than the Rails\nconvention “open_id_identifier” …\n"],["valid?","SearchRequest","SearchRequest.html#method-i-valid-3F","()","<p>Check the query string to make sure it is not blank (null, empty string, or\n&#39; &#39;) and make sure …\n"],["validate","UniqueUrlValidator","UniqueUrlValidator.html#method-i-validate","(record)",""],["validate","UniqueUsernameValidator","UniqueUsernameValidator.html#method-i-validate","(record)",""],["weekly_comment_tally","User","User.html#method-i-weekly_comment_tally","(span = 52)",""],["weekly_note_tally","User","User.html#method-i-weekly_note_tally","(span = 52)",""],["weekly_tallies","Node","Node.html#method-c-weekly_tallies","(type = 'note', span = 52, time = Time.now)",""],["weekly_tallies","Tag","Tag.html#method-i-weekly_tallies","(type = 'note', span = 52)","<p>OPTIMIZE: this too!\n"],["widget","TagController","TagController.html#method-i-widget","()",""],["wiki_edit_streak","User","User.html#method-i-wiki_edit_streak","(span = 365)",""],["wikis","TypeaheadService","TypeaheadService.html#method-i-wikis","(input, limit = 5)",""],["wikis_grid","NodeShared","NodeShared.html#method-c-wikis_grid","(body, _page = 1)",""],["README","","README_rdoc.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"]]}}
